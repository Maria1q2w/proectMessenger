{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","classes","dialogItem","to","id","activeClassName","active","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","dialog","key","messagesElements","messages","newMessageBody","isAuth","dialogsItems","values","sendMessage","compose","connect","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,WAAa,4BAA4B,SAAW,0BAA0B,QAAU,2B,8FCS5MC,EANI,SAACC,GAChB,OAAQ,yBAAKC,UAAaC,IAAQC,YAC9B,kBAAC,IAAD,CAASC,GAAM,YAAcJ,EAAMK,GAAIC,gBAAmBJ,IAAQK,QAASP,EAAMQ,QCC1EC,EAJC,SAACT,GACb,OAAQ,yBAAKC,UAAYC,IAAQQ,SAAUV,EAAMU,U,yCCC/CC,EAAcC,YAAiB,IAWtBC,cAAU,CAACC,KAAM,wBAAjBD,EATQ,SAACb,GACpB,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,kBAACC,EAAA,EAAD,CAAOC,UAAYC,IAAUC,SAAU,CAACC,IAAUV,GAAcH,KAAK,iBAAiBc,YAAa,uBACnG,6BAAK,6CCsCFC,EAzCC,SAACvB,GAEb,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAM,OAAI,kBAAC,EAAD,CAAYrB,KAAQqB,EAAOrB,KAAMsB,IAAMD,EAAOxB,GAAIA,GAAMwB,EAAOxB,QAC7G0B,EAAmBP,EAAMQ,SAASJ,KAAI,SAAAlB,GAAO,OAAI,kBAAC,EAAD,CAASA,QAAWA,EAAQA,QAASoB,IAAMpB,EAAQL,QACnFmB,EAAMS,eAM3B,OAAoB,GAAhBjC,EAAMkC,OACC,kBAAC,IAAD,CAAU9B,GAAI,WAIrB,yBAAKH,UAAaC,IAAQyB,SACtB,yBAAK1B,UAAaC,IAAQiC,cACrBT,GAEL,yBAAKzB,UAAaC,IAAQ8B,UACtB,6BAAMD,IAGV,kBAAC,EAAD,CAAgBhB,SAjBJ,SAACqB,GACjBpC,EAAMqC,YAAYD,EAAOH,qB,uBC0BlBK,sBACXC,aAfkB,SAACf,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAIF,SAACe,GACtB,MAAO,CACHH,YAAa,SAACJ,GACVO,EAASC,YAAmBR,SAOpCS,IAFWJ,CAGTf","file":"static/js/4.3e031bea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"dialogItem\":\"Dialogs_dialogItem__1AD6j\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import classes from './../Dialogs.module.css';\nimport { NavLink } from \"react-router-dom\";\nimport React from 'react';\n\nconst DialogItem = (props) => {\n    return (<div className = {classes.dialogItem}>\n        <NavLink to = {\"/dialogs/\" + props.id} activeClassName = {classes.active}>{props.name}</NavLink> \n    </div>)\n}\n\nexport default DialogItem;","import classes from './../Dialogs.module.css';\nimport React from 'react';\n\nconst Message = (props) => {\n    return (<div className= {classes.message}>{props.message}</div>)\n}\n\nexport default Message;","import { Field, reduxForm } from \"redux-form\";\nimport React from \"react\";\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst AddMessageForm = (props) => {\n    return(\n        <form onSubmit={props.handleSubmit}>\n            <Field component= {Textarea} validate={[required, maxLength50]} name=\"newMessageBody\" placeholder= \"Enter your message\" />\n            <div><button>Send</button></div>\n        </form>\n    )\n}\n\nexport default reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)","import DialogItem from './DialogItem/DialogItem';\nimport classes from './Dialogs.module.css';\nimport Message from './Message/Message';\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport AddMessageForm from './AddMessageForm';\n\n\nconst Dialogs = (props) => {\n    \n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map(dialog => <DialogItem name = {dialog.name} key= {dialog.id} id = {dialog.id} />);\n    let messagesElements = state.messages.map(message => <Message message = {message.message} key= {message.id} />);\n    let newMessageBody = state.newMessageBody;\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    if (props.isAuth == false) {\n        return <Redirect to={\"/login\"} />\n    }\n\n    return (\n        <div className = {classes.dialogs}>\n            <div className = {classes.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className = {classes.messages}>\n                <div>{messagesElements}</div>\n                \n            </div>\n            <AddMessageForm onSubmit={addNewMessage} />\n        </div>\n    )\n}\n\n// const AddMessageForm = (props) => {\n//     return(\n//         <form onSubmit={props.handleSubmit}>\n//             <Field component=\"textarea\" name=\"newMessageBody\" placeholder= \"Enter your message\" />\n//             <div><button>Send</button></div>\n//         </form>\n//     )\n// }\n\n// const AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddMessageForm)\n\nexport default Dialogs;","import { sendMessageCreator } from '../../redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\nimport { connect } from 'react-redux';\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\n\n// const DialogsContainer = () => {\n//     return (\n//         <StoreContext.Consumer> \n//             {store => {\n//             let state = store.getState().dialogsPage;\n\n//             let onSendMessageClick = () => {\n//                 store.dispatch(sendMessageCreator())\n//             }\n        \n//             let onNewMessageChange = (body) => {\n//                 store.dispatch(updateNewMessageBodyCreator(body))\n//             }\n//             return (\n//                 <Dialogs updateNewMessageBody= {onNewMessageChange} sendMessage= {onSendMessageClick} dialogsPage= {state} />\n//             )\n//         }}\n//         </StoreContext.Consumer>\n        \n//     )\n// }\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageCreator(newMessageBody))\n        }\n    }\n};\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps), \n    withAuthRedirect\n    )(Dialogs);"],"sourceRoot":""}