{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Posts/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","c","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","classes","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","length","formData","then","initialValues","Post","item","message","like","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","reverse","post","id","likesCount","createRef","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","content","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.7393ae3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__2wLDD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1d730\"};","import classes from \"./ProfileInfo.module.css\";\nimport React, {useEffect, useState} from 'react';\n\nconst ProfileStatusWithHooks = (props) => {\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMods = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n    return (\n    <div>\n        {!editMode && \n        <div>\n            <b>Status: </b><span onDoubleClick={activateEditMods} >{props.status || \"-----\"}</span>\n        </div>\n        }\n        {editMode &&\n        <div>\n            <input onChange={onStatusChange} autoFocus={true} value={status} onBlur={deactivateEditMode} />\n        </div>\n        }       \n    </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import classes from \"./ProfileInfo.module.css\";\nimport React from 'react';\nimport { reduxForm } from 'redux-form';\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls';\nimport c from '../../common/FormsControls/FormsControls.module.css';\n\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\n    return <form onSubmit={handleSubmit}>\n        <div><button>save</button></div> \n        {error && <div className={c.formSummaryError}>\n                {error}\n            </div>}\n        <div>\n            <b>Ful name: </b> {createField(\"Full name\", \"fullName\", Input, [])}\n        </div>\n        <div>\n            <b>Loocking for a job: </b> {createField(\"\", \"lookingForAJob\", Input, [], {type: \"checkbox\"})}\n        </div>\n        <div>\n            <b>My professional skills:</b>\n            {createField(\"My professional skills\", \"lookingForAJobDescription\", Textarea, [] )}\n        </div>\n        \n        <div>\n            <b>About me:</b>\n            {createField(\"About me\", \"aboutMe\", Textarea, [] )}\n        </div>\n        <div>\n            <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\n                return <div key={key} className={classes.contact}>\n                    <b>{key}: {createField(key, \"contacts.\" + key, Input, [])} </b>\n                </div>\n            })}\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;","import classes from \"./ProfileInfo.module.css\";\nimport React, { useState } from 'react';\nimport Preloader from \"../../common/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from './../../../assets/images/user.png';\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader />\n    }\n\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n        savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData) => {\n        saveProfile(formData).then(() => {\n            setEditMode(false);\n        })\n    }\n\n    return (<div>\n        <div className = {classes.descriptionBlock}>\n            <img src={profile.photos.large || userPhoto} className={classes.mainPhoto} ></img>\n            {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\n            {editMode \n            ? <ProfileDataFormReduxForm profile={profile} onSubmit={onSubmit} initialValues={profile} /> \n            : <ProfileData goToEditMode={() => {setEditMode(true)}} profile={profile} isOwner={isOwner} />}\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n        </div>\n    </div>)\n}\n\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n            {isOwner && <div><button onClick={goToEditMode} >edit</button></div> }\n                <div>\n                    <b>Full name: </b> {profile.fullName}\n                </div>\n                <div>\n                    <b>Loocking for a job: </b> {profile.lookingForAJob ? \"yes\" : \"no\"}\n                </div>\n                {profile.lookingForAJob && \n                <div>\n                    <b>My professional skills:</b> {profile.lookingForAJobDescription}\n                </div>\n                }\n                <div>\n                    <b>About me:</b> {profile.aboutMe}\n                </div>\n                <div>\n                    <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\n                    })}\n                </div>\n            </div>\n}\n\nconst Contact = ({contactTitle, contactValue}) => {\n    return <div className={classes.contact}><b>{contactTitle}: </b>{contactValue}</div>\n}\n\nexport default ProfileInfo;","import classes from \"./Post.module.css\";\nimport React from 'react';\n\nconst Post = (props) => {\n    return (<div className = {classes.item}>\n                <img src = \"https://avatars.mds.yandex.net/i?id=bc493ebfd4db3861036b3c98f388b3408b4ffc3e-2510862-images-thumbs&n=13\"></img>\n                {props.message}\n                    <div><span>Like </span>{props.like}</div>\n            </div>)}\n\nexport default Post;","import classes from \"./MyPosts.module.css\";\nimport Post from \"./Posts/Post\";\nimport { PureComponent } from \"react\";\nimport React from 'react';\nimport { Field, reduxForm } from \"redux-form\";\nimport { maxLengthCreator, required }from \"../../../utils/validators/validators\"\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\n\nlet maxLength10 = maxLengthCreator(10);\n\nlet AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name=\"newPostText\" component={Textarea} placeholder={\"Post message\"} validate={[required, maxLength10]} />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\n\nconst MyPosts = React.memo((props) => {\n\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     return nextProps != this.props || nextState != this.state;\n    // }\n\n    let postsElements  = [...props.posts].reverse().map(post => <Post key={post.id} message= {post.message} like= {post.likesCount} key={post.id} />)\n        let newPostElement = React.createRef();\n    \n        let onAddPost = (values) => {\n            props.addPost(values.newPostText);\n        };\n\n        return (<div className= {classes.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost} />\n            <div className= {classes.posts}>\n                {postsElements}\n            </div>\n        </div>\n        )\n})\n\nexport default MyPosts;","import { addPostActionCreator } from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport { connect } from \"react-redux\";\n\n\n// const MyPostsContainer = () => {\n//     return (\n//         <StoreContext.Consumer> \n//             {(store) => {\n//                 let state = store.getState();\n\n//                 let addPost = () => {\n//                     store.dispatch(addPostActionCreator());\n//                 };\n            \n//                 let onPostChange = (text) => {\n//                     let action = updateNewPostTextActionCreator(text);\n//                     store.dispatch(action);\n//                 }\n//                 return (\n//                 <MyPosts updateNewPostText= {onPostChange} addPost= {addPost} posts= {state.profilePage.posts} newPostText= {state.profilePage.newPostText} />)\n                \n//                 }\n//             }\n//         </StoreContext.Consumer>\n//     )\n// }\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText))\n        }\n    }\n};\n\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import classes from \"./Profile.module.css\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport React from 'react';\n\nconst Profile = (props) => {\n    return (<div className = {classes.content}>\n        <ProfileInfo profile = {props.profile} status={props.status} updateStatus={props.updateStatus} isOwner={props.isOwner} savePhoto={props.savePhoto} saveProfile={props.saveProfile} />\n        <MyPostsContainer />\n    </div>)\n}\n\nexport default Profile;","import React from 'react';\nimport { connect } from 'react-redux';\nimport Profile from './Profile';\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\nimport { withRouter } from 'react-router-dom';\nimport { withAuthRedirect } from '../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\n\nclass ProfileContainer extends React.Component {\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId) {\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate (prevProps, prevState, snapshot) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n        this.refreshProfile();\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props} profile= {this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} isOwner={!this.props.match.params.userId} savePhoto={this.props.savePhoto}\n            />\n        )\n    }\n    \n}\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose(\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer)\n\n"],"sourceRoot":""}